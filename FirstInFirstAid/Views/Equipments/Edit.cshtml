@model FirstInFirstAid.Models.Equipment

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section Scripts {

    @Scripts.Render("~/Scripts/jquery-ui-timepicker-addon.min.js")

    <script type="text/javascript">
        $(document).ready(function () {
            $("#DateSupplied").datepicker({
                dateFormat: "dd.M.yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-50:+50",
                controlType: "select",
                onSelect: function (selected) {
                    $("#DateReturned").datepicker("option", "minDate", selected)
                }
            });

            $("#DateReturned").datepicker({
                dateFormat: "dd.M.yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-50:+50",
                controlType: "select",
                onSelect: function (selected) {
                    $("#DateSupplied").datepicker("option", "maxDate", selected)
                }
            });  

            $.ajax({
                type: "POST",
                url: "/Equipments/GetTrainers",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (trainerList) {
                    $('#Trainer').append($("<option selected value='Please Select'>Please Select</option>"));

                    $.each(trainerList, function (index, trainer) {
                        $('#Trainer').append($("<option></option>").attr("value", trainer.Id).text(trainer.FirstName + " " + trainer.Lastname));
                    });
                },
                error: function () {
                    alert("Failed to load Trainers");
                }
            });
            var i = @Model.EquipmentAllocations.Count();
            $("#addAllocation").click(function () {
                if ($(this).attr('data-action') == "add") {
                    $('#allocations> tbody:last-child').append(
                        "<tr id=" + i + ">" +
                        "<td> " + $("#DateSupplied").val() + "</td>" +
                        "<td>" + $("#DateReturned").val() + "</td>" +
                        "<td data-trainerid=" + $("#Trainer").val() + ">" + $("#Trainer option:selected").text() + "</td>" +
                        "<td>" +
                        "<button type='button' class='btn btn-danger' value= 'Delete' onclick= 'deleteAllocation(" + i + ")'>" +
                        "Delete" +
                        "</button>" +
                        "<button type='button' class='btn btn-primary' data-toggle='modal' data-target='#modal' data-id=" + i + " data-action='Change'>" +
                        "Edit" +
                        "</button>" +
                        "</td>" +
                        "</tr >");
                    i++;
                } else {
                    var trId = $("#trId").val();
                    $("#" + trId + " td:nth-child(1)").html($("#DateSupplied").val());
                    $("#" + trId + " td:nth-child(2)").html($("#DateReturned").val());
                    $("#" + trId + " td:nth-child(3)").html($("#Trainer option:selected").text());
                    $("#" + trId + " td:nth-child(3)").attr("data-trainerid", $("#Trainer").val());
                }
                $('#modal').modal('hide');
            });

            $("#modal").on('hidden.bs.modal', function () {
                $(".modal-body input").val("");
            });


            $('#modal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget) // Button that triggered the modal
                var buttonName = button.data('action') // Extract info from data-* attributes
                // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
                // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
                var modal = $(this);
                if (buttonName == "Change") {
                    var rowId = button.data('id');
                    modal.find('.modal-footer button span').text(buttonName);
                    modal.find('.modal-footer button').attr("data-action", "change");
                    modal.find('.modal-body input#DateSupplied').val($("#" + rowId + " td:nth-child(1)").html());
                    modal.find('.modal-body input#DateReturned').val($("#" + rowId + " td:nth-child(2)").html());                    
                    modal.find('.modal-body select#Trainer').val($("#" + rowId + " td:nth-child(3)").attr("data-trainerid")).change();
                    modal.find('.modal-body input#trId').val(rowId);
                } else {
                    modal.find('.modal-footer button span').text("Add");
                    modal.find('.modal-footer button').attr("data-action", "add");
                }
            });
        });

        function deleteAllocation(id) {
            $("#" + id).remove();
        };

        function addAllocationsToForm() {
            var count = 0;

            $('#allocations > tbody > tr:not(:first)').each(function () {
                var columns = $(this).find('td');
                
                $("#form").append("<input type='hidden' name='EquipmentAllocations[" + count + "].DateSupplied'" + " value='" + $(columns[0]).html().trim() + "'/>");
                $("#form").append("<input type='hidden' name='EquipmentAllocations[" + count + "].DateReturned'" + " value='" + $(columns[1]).html().trim() + "'/>");
                $("#form").append("<input type='hidden' name='EquipmentAllocations[" + count + "].Trainor.Id'" + " value='" + $(columns[2]).attr("data-trainerid").trim() + "'/>");
                $("#form").append("<input type='hidden' name='EquipmentAllocations[" + count + "].Id'" + " value='" + $(this).attr("data-dbId").trim() + "'/>");
                count++;
            });
        }
    </script>
}
<h3 class="page-header">Edit Equipment Allocation</h3>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal"  id="form">
       
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.EquipmentName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EquipmentName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EquipmentName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Add Equipment Allocation:</label>
            <div class="col-md-10">
                <button data-target="#modal" data-toggle="modal" type="button" class="btn btn-success .btn-sm"> Add </button>
            </div>
        </div>

        <h4 class="page-header"> Equipment Allocation</h4>
        <div class="table-responsive">
            <table class="table" id="allocations" style="width:100%; padding-top:40px;">
                <tbody>
                    <tr>
                        <th>Supplied Date</th>
                        <th>Retuned Date</th>
                        <th>Trainer</th>
                        <th>Actions</th>
                    </tr>

                    @if (Model.EquipmentAllocations != null)
                    {
                        var count = 0;
                        foreach (var allocation in Model.EquipmentAllocations)
                        {
                            <tr id=@count data-dbId=@allocation.Id>
                                <td>@allocation.DateSupplied</td>
                                <td>@allocation.DateReturned</td>
                                <td data-trainerid="@allocation.Trainor.Id">@allocation.Trainor.FirstName  @allocation.Trainor.Lastname</td>
                                <td>
                                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#modal" data-id="@count" data-action="Change">
                                        Edit
                                    </button>
                                    <button type="button" class="btn btn-danger" value="Delete" onclick="deleteAllocation(@count)">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <input onclick="addAllocationsToForm();" type="submit" value="Save" class="btn btn-success btn-lg" />
            </div>
        </div>
    </div>
}

<div id="modal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Create Equipment Allocation</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <input id="trId" type="hidden"/>
                    <div class="form-group">
                        <label class="control-label col-md-3">Date Supplied</label>
                        <div class="col-md-9">
                            @Html.Editor("DateSupplied", new { htmlAttributes = new { @id = "DateSupplied", @class = "form-control", @type = "datetime", onkeydown = "return false", onpaste = "return false" } })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3">Date Returned</label>
                        <div class="col-md-9">
                            @Html.Editor("DateReturned", new { htmlAttributes = new { @id = "DateReturned", @class = "form-control", @type = "datetime", onkeydown = "return false", onpaste = "return false" } })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3">Trainer</label>
                        <div class="col-md-9">
                            <select id="Trainer" class="form-control"></select>
                        </div>
                    </div>
                </div>

            </div>
            <div class="modal-footer">                
                <button type="button" class="btn btn-default" id="addAllocation" data-dismiss="modal">
                    <span class="ui-button-text">Add</span>
                </button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
