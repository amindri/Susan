@model FirstInFirstAid.Models.EventSegment

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts {

    @Scripts.Render("~/Scripts/jquery-ui-timepicker-addon.min.js")
    @Scripts.Render("~/Scripts/jquery-combobox.js")

<script type="text/javascript">
    $(document).ready(function () {

            $('#emailModal').on('show.bs.modal', function (event) {
                var button = $(event.relatedTarget) // Button that triggered the modal
                var trainerId = button.data('trainerid') // Extract
                var modal = $(this);
                modal.find('.modal-body input#trainerId').val(trainerId);

                //add email body
                $.ajax({
                type: "GET",
                url: '/EventSegments/getEmailBody/' + '@Model.Id',
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    modal.find('.modal-body textarea#messageBody').val(response.Body);
                    modal.find('.modal-body input#subject').val(response.Subject);
                },
                error: function (xhr, status, error) {
                    $("#warnModalBody").text(error);
                    $('#warnModal').modal('show');
                }
            });

            });

            $("input[type=datetime]").datetimepicker({
                dateFormat: "dd-M-yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:+5",
                controlType: "select",
                timeFormat: "hh:mm TT",
                "stepMinute": 15
                });

            $.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };


            var dutyTypes = @Html.Raw(ViewBag.DutyTypeEnum);

            var i = 0;
            $("#addAllocation").click(function () {
                i++;

                $('<div class="panel panel-default col-md-12" id=\"NS' + i + '\">' +
                    '<div class="form-group">' +
                        '<label class="control-label col-md-4">Available Trainers</label>' +
                        '<div class="col-md-8">' +
                            '<select class=\"form-control combobox\" id=\"Name\"></select>' +
                        '</div>' +
                    '</div>' +
                   /* '<div class="form-group">' +
                        '<label class="control-label col-md-4">Duty Type</label>' +
                        '<div class="col-md-8">' +
                            '<select id=\"DutyType\" class=\"form-control combobox\"></select>' +
                        '</div>' +
                    '</div>' +*/
                    '<div class="form-group">' +
                        '<label class="control-label col-md-4">Hours</label>' +
                        '<div class="col-md-8">' +
                            '<input id=\"Hours\" type="\text\" class=\"form-control\">' +
                        '</div>' +
                    '</div>' +
                    '<div class="form-group">' +
                        '<label class="control-label col-md-4">Paid</label>' +
                        '<div class="col-md-8">' +
                            '<select id=\"Paid\" class=\"form-control\"><option selected value=\"false\">No</option><option value=\"true\">Yes</option></select>' +
                        '</div>' +
                    '</div>' +
                    '<div class="form-group">' +
                        '<label class="control-label col-md-4">PresenceConfirmation</label>' +
                        '<div class="col-md-8">' +
                            '<select id=\"Confirmation\" class=\"form-control\"><option selected value=\"false\">No</option><option value=\"true\">Yes</option></select>' +
                        '</div>' +
                    '</div>' +
                    '<div class="form-group">' +
                        '<label class="control-label col-md-4">PaymentNote</label>' +
                        '<div class="col-md-8">' +
                            '<textarea id=\"PaymentNote\" type="\text\" class=\"form-control\"></textarea>' +
                        '</div>' +
                    '</div>' +

                    '<button type="button" value="Create" class="btn btn-success" onclick="createAllocation(' + i + ');">Create</button>' +
                    '<button type="button" value="Delete" class="btn btn-danger" onclick="$(this).parent().remove();">Delete</button>' +
                '</div>').insertAfter("#addAllocation");

                $("#NS" + i + " select#Name").combobox({ getdata: getAvailableTrainers, param: "NS" + i });
                $("#NS" + i + " select#DutyType").append($("<option>Please Select</option>"));
                $.each(dutyTypes, function (index, dutyType) {
                    $("#NS" + i + " select#DutyType").append($("<option></option>").attr("value", dutyType.ID).text(dutyType.Name));
                });
            });

            var clinetContactId = @(Model.ClientContact == null ? -1 : Model.ClientContact.Id);
            if (clinetContactId == -1) {
                $('#ClientContact').append($("<option selected value='Please Select'>Please Select</option>"));
            }

            var venueId = @(Model.Venue == null ? -1 : Model.Venue.Id);
            if (venueId == -1) {
                $('#Venue').append($("<option selected value='Please Select'>Please Select</option>"));
            }

            $(function () {
                window.setTimeout(function () {
                    $('#ClientContact').combobox({ getdata: appendClientContacts });
                    $('#Venue').combobox({ getdata: appendVenues });
                }, 0);
            });

            /* Client side validation for client contact drop box */
            $("#saveEventSeg").click(function () {
                var cContact = $("#ClientContact").val();
                var venue = $("#Venue").val();
                if ((cContact == 'Please Select') || (cContact == '')) {
                   // $("#ccempty").show();
                } else {
                    $("#form").append("<input type='hidden' name='clientContactId'" + " value='" + $("#ClientContact").val() + "'/>");

                }
                if ((venue == 'Please Select') || (venue == '')) {
                  //  $("#vempty").show();
                } else {
                    $("#form").append("<input type='hidden' name='venueId'" + " value='" + $("#Venue").val() + "'/>");
                }

            });
        });

        function gettoken() {
            var token = '@Html.AntiForgeryToken()';
            token = $(token).val();
            return token;
        };

        function appendVenues(select) {
            $.ajax({
                type: "POST",
                url: "/EventSegments/getVenues",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (venues) {
                    $('#Venue').empty();
                    if (venues.length == 0) {
                        $('#Venue').append($("<option></option>").text("No Venues created. Please create the venue"));
                    } else {
                        $.each(venues, function (index, venue) {
                            if (venue.Id == select) {
                                $('#Venue').append($("<option selected></option>").attr("value", venue.Id).text(venue.VenueName));
                            } else {
                                $('#Venue').append($("<option></option>").attr("value", venue.Id).text(venue.VenueName));
                            }
                        });
                    }
                },
                error: function () {
                    alert("Failed to load venues");
                }
            });

        }
        function appendClientContacts(select) {
            $.ajax({
                type: "POST",
                url: "/EventSegments/getClientContacts",
                contentType: "application/json; charset=utf-8",
                data: "{'eventId' : '" + @Model.Event.Id + "'}",
                dataType: "json",
                success: function (clientContactList) {
                    $('#ClientContact').empty();

                    if (clientContactList.length == 0) {
                        $('#ClientContact').append($("<option></option>").text("No Client Contacts assigned to the client"));
                    } else {
                        $.each(clientContactList, function (index, client) {
                            if (client.Id == select) {
                                $('#ClientContact').append($("<option selected></option>").attr("value", client.Id).text(client.ContactName));
                            } else {
                                $('#ClientContact').append($("<option></option>").attr("value", client.Id).text(client.ContactName));
                            }
                        });
                    }
                },
                error: function () {
                    alert("Failed to load Client Contacts");
                }
            });
        };

        function getAvailableTrainers(divId) {
            $.ajax({
                type: 'POST',
                url: '/EventSegments/getAvailableTrainers',
                data: "{'segmentId' : '" + @Model.Id + "'}",
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (trainerList) {

                    $("#" + divId + " select#Name").empty();

                    if (trainerList.length == 0) {
                        $("#" + divId + " select#Name").append($("<option></option>").text("No Available Trainers for this time"));
                    } else {
                        $.each(trainerList, function (index, trainer) {
                            $("#" + divId + " select#Name").append($("<option></option>").attr("value", trainer.Id).text(trainer.FirstName + " " + trainer.Lastname));
                        });
                    }
                },
                error: function (msg) {
                    console.log(msg);
                }
            });
        };


        function createAllocation(nsId) {

            var allocation = {
                trainorAllocation: {
                    DutyType: $.trim($("#NS" + nsId + ' #DutyType').val()),
                    PresenceConfirmation: $.trim($("#NS" + nsId + ' #Confirmation').val()),
                    PaymentNote: $.trim($("#NS" + nsId + ' #PaymentNote').val()),
                    Hours: $.trim($("#NS" + nsId + ' #Hours').val()),
                    Paid: $.trim($("#NS" + nsId + ' #Paid').val())
                },
                eventSegmentId: '@Model.Id',
                trainerId: $.trim($("#NS" + nsId + ' #Name').val())
            };

            $.ajax({
                type: "POST",
                url: '@Url.Action("Create", "TrainorAllocationForEventSegs")',
                data: JSON.stringify(allocation),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                   $("#successModalBody").text("Successfully created the trainer allocation with the trainer");
                   $('#successModal').modal('show');
                },
                error: function (message) { }
            });
        };

        function updateAllocation(dbId) {

            var allocation = {
                trainorAllocation: {
                    DutyType: $.trim($("#saved_" + dbId + ' #DutyType').val()),
                    PresenceConfirmation: $.trim($("#saved_" + dbId + ' #Confirmation').val()),
                    PaymentNote: $.trim($("#saved_" + dbId + ' #PaymentNote').val()),
                    Hours: $.trim($("#saved_" + dbId + ' #Hours').val()),
                    Paid: $.trim($("#saved_" + dbId + ' #Paid').val()),
                    Id: dbId
                },
                trainerId: $.trim($("#saved_" + dbId + ' #Name').attr("data-trainerId"))
            };
            $.ajax({
                type: "POST",
                url: '@Url.Action("Edit", "TrainorAllocationForEventSegs")',
                data: JSON.stringify(allocation),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    $("#successModalBody").text("Successfully updated the trainer allocation");
                    $('#successModal').modal('show');
                },
               error: function (message) { alert("Error while updating the trainer allocation " + message);}
            });
        };

        function deleteAllocation(dbId) {

            $.ajax({
                type: "GET",
                url: "/TrainorAllocationForEventSegs/Delete/" + dbId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (obj) {
                    if (obj.Type == 'Warn') {
                        $("#warnModalBody").text(obj.Message);
                        $('#warnModal').modal('show');
                    } else {
                        $("#delButton").attr("onclick", "deleteConfirmed(" + dbId + ")");
                        $("#confirmModalBody").text(obj.Message);
                        $('#confirmModal').modal('show');
                    }
                },
                error: function (obj) {
                    alert("Failed to delete the trainer allocation " + obj);
                }
            });
        };

        function deleteConfirmed(dbId) {
            $.ajax({
                type: "POST",
                url: "/TrainorAllocationForEventSegs/DeleteConfirmed/" + dbId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {
                    $("#successModalBody").text(msg);
                    $('#successModal').modal('show');
                },
                error: function (obj) {
                    alert("Error while deleting trianer allocation" + obj);
                }
            });
        };

        function sendEmail() {
            var mail = {
                trainerId: $.trim($("#trainerId").val()),
                messageBody: $.trim($("#messageBody").val()),
                subject: $.trim($("#subject").val())
            };

            $.ajax({
                type: "POST",
                url: '/EventSegments/SendMail',
                data: JSON.stringify(mail),
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.Type == "Success") {
                        $("#successModalBody").text(response.Message);
                        $('#successModal').modal('show');
                    } else {
                        $("#warnModalBody").text(response.Message);
                        $('#warnModal').modal('show');
                    }
                },
                error: function (xhr, status, error) {
                    $("#warnModalBody").text(error);
                    $('#warnModal').modal('show');
                }
            });
        };
</script>
}
<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="form">
        <h4>Event Segment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            <label class="control-label col-md-2" for="Name">Name:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="StartTime">Start Time:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control", @type = "datetime", onkeydown = "return false", onpaste = "return false" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="EndTime">End Time:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control", @type = "datetime", onkeydown = "return false", onpaste = "return false" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="Hours">Hours:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Hours, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Hours, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="RequiredNumberOfStaff">Required No. of Staff:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.RequiredNumberOfStaff, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RequiredNumberOfStaff, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="TotalFee">Total Fee:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.TotalFee, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TotalFee, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Duty Type:</label>
            <div class="col-md-10">
                <!--@Html.EditorFor(model => model.Coverage, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Coverage, "", new { @class = "text-danger" })-->
                <!--Drop down added by Anu-->
                @Html.EnumDropDownListFor(model => model.Coverage, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Coverage, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="ClientContact">Client Contact:</label> 
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.ClientContact.Id, (SelectList)ViewBag?.ClientContact, new { id = "ClientContact" }) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Html.ActionLink("Edit Client", "Index", "Clients", null, new { @id = "link", target = "_blank" })
                <p id="ccempty" class="c-val" hidden>Client contact is missing</p>
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="Venue">Venue:</label> 
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.Venue.Id, (SelectList)ViewBag?.Venues, new { id = "Venue" }) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; @Html.ActionLink("Add Venue", "Create", "Venues", null, new { @id = "link", target = "_blank" })
                <p id="vempty" class="c-val" hidden>Venue name is missing</p>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" id="saveEventSeg"/>
            </div>
        </div>
    </div>
}
    <div class="container-fluid">
        <div class="form-group">
            <label class="control-label col-md-2">Trainer Allocations</label>
            <div id="allocations" class="panel panel-default panel-body col-md-8">
                <button id="addAllocation" data-target="#modal" data-toggle="modal" type="button" class="btn btn-success"> Add </button> <br/>
                @if (Model.TrainorAllocations != null)
                {
                for(var i = 0; i < Model.TrainorAllocations.Count(); i++)
                {
                    <div class="panel panel-default col-md-12 saved panel-t" id='saved_@Model.TrainorAllocations[i].Id'>
                        <div class="form-group">
                            <label class="control-label col-md-3">Trainer Name</label>
                            <div class="col-md-9">
                                <input type="text" class="form-control col-md-9" id="Name" readonly data-trainerId="@Model.TrainorAllocations[i].Trainor.Id" value="@Model.TrainorAllocations[i].Trainor.FirstName @Model.TrainorAllocations[i].Trainor.Lastname">
                            </div>
                        </div>                        
                        <div class="form-group">
                            <label class="control-label col-md-3">Hours</label>
                            <div class="col-md-9">
                                @Html.EditorFor(m => m.TrainorAllocations[i].Hours, new { htmlAttributes = new { @id = "Hours", @class = "form-control" } })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3">Paid</label>
                            <div class="col-md-9">
                                @Html.DropDownListFor(m => m.TrainorAllocations[i].Paid, new SelectList(ViewBag.BoolList, "Value", "Text", Model.TrainorAllocations[i].Paid),  new { @id = "Paid", @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3">PresenceConfirmation</label>
                            <div class="col-md-9">
                                @Html.DropDownListFor(m => m.TrainorAllocations[i].PresenceConfirmation, new SelectList(ViewBag.BoolList, "Value", "Text", Model.TrainorAllocations[i].PresenceConfirmation), new { @id = "Confirmation", @class = "form-control" })
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3">Payment Note</label>
                            <div class="col-md-9">
                                @Html.TextAreaFor(m => m.TrainorAllocations[i].PaymentNote,  new { @id = "PaymentNote",  @class = "form-control" } )
                            </div>
                        </div>

                        <button type="button" class="btn btn-success" onclick="updateAllocation(@Model.TrainorAllocations[i].Id)">Save Edits</button>
                        <button type="button" value="Delete" class="btn btn-danger" onclick="deleteAllocation(@Model.TrainorAllocations[i].Id)">Delete</button>
                        <button data-target="#emailModal" data-toggle="modal" id="sendEmail" data-trainerId="@Model.TrainorAllocations[i].Trainor.Id"  type="button" class="btn btn-primary"> Send Email </button>
                    </div>
            }
        }
            </div>
        </div>
    </div>

<div class="container-fluid">
    @Html.ActionLink("Back to List", "Index")
</div>


<div id="emailModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Send Email</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">
                    <input type="hidden" id="trainerId"/>

                    <div class="form-group">
                        <label class="control-label col-md-2">Subject</label>
                        <div class="col-md-10">
                            <input type="text" id="subject"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-2">Message</label>
                        <div class="col-md-10">
                            <textarea style="width:350px;height:200px" id="messageBody">                             
                            </textarea>
                        </div>
                    </div>                    
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" onclick="sendEmail()" data-dismiss="modal">Send</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
