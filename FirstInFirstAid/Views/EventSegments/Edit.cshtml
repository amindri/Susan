@model FirstInFirstAid.Models.EventSegment

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts {

    @Scripts.Render("~/Scripts/jquery-ui-timepicker-addon.min.js")
    @Scripts.Render("~/Scripts/jquery-combobox.js")

    <script type="text/javascript">
        $(document).ready(function () {
            var dutyTypes = @Html.Raw(ViewBag.DutyTypeEnum);

            var i = 0;
            $("#addAllocation").click(function () {
                i++;
                $("#allocations")
                    .append(
                    '<div class="panel panel-default col-md-12" id=\"NS' + i + '\">' +
                        '<p>' +
                            '<label class="control-label col-md-2">Trainer</label>' +
                            '<div class="col-md-10">' +
                                '<select class=\"form-control combobox\" id=\"Name\"></select>' +
                            '</div>' +
                        '</p>' +
                        '<p>' +
                            '<label class="control-label col-md-2">Duty Type</label>' +
                            '<div class="col-md-10">' +
                                '<select id=\"DutyType\" class=\"form-control combobox\"></select>' +
                            '</div>' +
                        '</p>' +
                        '<p>' +
                            '<label class="control-label col-md-2">Hours</label>' +
                            '<div class="col-md-10">' +
                                '<input id=\"Hours\" type="\text\" class=\"form-control\">' +
                            '</div>' +
                        '</p>' +
                        '<p>' +
                            '<label class="control-label col-md-2">Paid</label>' +
                            '<div class="col-md-10">' +
                                '<select id=\"Paid\" class=\"form-control\"><option selected value=\"false\">No</option><option value=\"true\">Yes</option></select>' +
                            '</div>' +
                        '</p>' +
                        '<p>' +
                            '<label class="control-label col-md-2">PresenceConfirmation</label>' +
                            '<div class="col-md-10">' +
                                '<select id=\"Confirmation\" class=\"form-control\"><option selected value=\"false\">No</option><option value=\"true\">Yes</option></select>' +
                            '</div>' +
                        '</p>' +
                        '<p>' +
                            '<label class="control-label col-md-2">PaymentNote</label>' +
                            '<div class="col-md-10">' +
                                '<input id=\"PaymentNote\" type="\text\" class=\"form-control\">' +
                            '</div>' +
                        '</p>' +
                        '<button type="button" value="Delete" class="btn btn-default" onclick="$(this).parent().remove();">Delete</button>' +
                        '<button type="button" value="Send Email" class="btn btn-default">Send Email</button>' +
                    '</div>');

                $("#NS" + i + " select#Name").combobox({ getdata: getAvailableTrainers, param: "NS" + i });
                $("#NS" + i + " select#DutyType").append($("<option>Please Select</option>"));
                $.each(dutyTypes, function (index, dutyType) {
                    $("#NS" + i + " select#DutyType").append($("<option></option>").attr("value", dutyType.Value).text(dutyType.Text));
                });
            });

            var clinetContactId = @(Model.ClientContact == null ? -1 : Model.ClientContact.Id);
            if (clinetContactId == -1) {
                $('#ClientContact').append($("<option selected value='Please Select'>Please Select</option>"));
            } else {
                appendClientContacts(clinetContactId);
            }

            var venueId = @(Model.Venue == null ? -1 : Model.Venue.Id);
            if (venueId == -1) {
                $('#Venue').append($("<option selected value='Please Select'>Please Select</option>"));
            } else {
               // appendVenues(venueId);
            }

            $(function () {
                window.setTimeout(function () {
                    $('#ClientContact').combobox({ getdata: appendClientContacts });
                    $('#Venue').combobox({ getdata: appendVenues });
                }, 0);
            });
        });

        function appendVenues(select) {
            $.ajax({
                type: "POST",
                url: "/EventSegments/getVenues",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (venues) {
                    $('#Venue').empty();
                    if (venues.length == 0) {
                        $('#Venue').append($("<option></option>").text("No Venues created. Please create the venue"));
                    } else {
                        $.each(venues, function (index, venue) {
                            if (venue.Id == select) {
                                $('#Venue').append($("<option selected></option>").attr("value", venue.Id).text(venue.VenueName));
                            } else {
                                $('#Venue').append($("<option></option>").attr("value", venue.Id).text(venue.VenueName));
                            }
                        });
                    }
                },
                error: function () {
                    alert("Failed to load venues");
                }
            });

        }
        function appendClientContacts(select) {
            $.ajax({
                type: "POST",
                url: "/EventSegments/getClientContacts",
                contentType: "application/json; charset=utf-8",
                data: "{'eventId' : '" + @Model.Event.Id + "'}",
                dataType: "json",
                success: function (clientContactList) {
                    $('#ClientContact').empty();

                    if (clientContactList.length == 0) {
                        $('#ClientContact').append($("<option></option>").text("No Client Contacts assigned to the client"));
                    } else {
                        $.each(clientContactList, function (index, client) {
                            if (client.Id == select) {
                                $('#ClientContact').append($("<option selected></option>").attr("value", client.Id).text(client.ContactName));
                            } else {
                                $('#ClientContact').append($("<option></option>").attr("value", client.Id).text(client.ContactName));
                            }
                        });
                    }
                },
                error: function () {
                    alert("Failed to load Client Contacts");
                }
            });
        };

        function getAvailableTrainers(divId) {
            $.ajax({
                type: 'POST',
                url: '/EventSegments/getAvailableTrainers',
                data: "{'segmentId' : '" + @Model.Id + "'}",
                dataType: 'json',
                contentType: "application/json; charset=utf-8",
                success: function (trainerList) {

                    $("#" + divId + " select#Name").empty();

                    if (trainerList.length == 0) {
                        $("#" + divId + " select#Name").append($("<option></option>").text("No Available Trainers for this time"));
                    } else {
                        $.each(trainerList, function (index, trainer) {
                           // if (client.Id == select) {
                             //   $('#ClientContact').append($("<option selected></option>").attr("value", client.Id).text(client.ContactName));
                            //} else {
                            $("#" + divId + " select#Name").append($("<option></option>").attr("value", trainer.Id).text(trainer.FirstName + " " + trainer.Lastname));
                            //}
                        });
                    }
                },
                error: function (msg) {
                    console.log(msg);
                }
            });
        };

        function completeForm() {
            $("#form").append("<input type='hidden' name='clientContactId'" + " value='" + $("#ClientContact").val() + "'/>");
            $("#form").append("<input type='hidden' name='venueId'" + " value='" + $("#Venue").val() + "'/>");

        };
    </script>
}
<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" id="form">
        <h4>Event Segment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            <label class="control-label col-md-2" for="Name">Name:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="StartTime">Start Time:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="EndTime">End Time:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="Hours">Hours:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Hours, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Hours, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="RequiredNumberOfStaff">Required No. of Staff:</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.RequiredNumberOfStaff, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.RequiredNumberOfStaff, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <!--@Html.LabelFor(model => model.ClientContact, htmlAttributes: new { @class = "control-label col-md-2" })-->
            <label class="control-label col-md-2" for="ClientContact">Client Contact:</label>
            <div class="col-md-10">
                @Html.DropDownListFor(m => m.ClientContact.Id, (SelectList)ViewBag?.ClientContact, new { id = "ClientContact" })
                </div>
        </div>

            <div class="form-group">
                <!--@Html.LabelFor(model => model.Venue, htmlAttributes: new { @class = "control-label col-md-2" })-->
                <label class="control-label col-md-2" for="Venue">Venue:</label>
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.Venue.Id, (SelectList)ViewBag?.Venues, new {id = "Venue"})
                </div>                
            </div>


            <div class="form-group">
            <label class="control-label col-md-2">Trainer Allocations</label>
            <div id="allocations" class="panel panel-default panel-body col-md-8">
                <button id="addAllocation" data-target="#modal" data-toggle="modal" type="button" class="btn btn-success .btn-sm"> Add </button>
                   @if (Model.TrainorAllocations != null)
                   {
                       foreach (var allocation in Model.TrainorAllocations)
                       {
                        <div class="panel panel-default panel-collapse">
                            <p>
                                <label class="control-label col-md-2">Name</label>
                                <div class="col-md-10">
                                             <!-- create drop down skeleton with the Id #Trainers fire the function getTrainers-->
                                </div>
                            </p>
                            <p>
                                <label class="control-label col-md-2">Duty Type</label>
                                <div class="col-md-10">
                                    @Html.Editor(allocation.DutyType.ToString(), new { htmlAttributes = new { @id = "DutyType", @class = "form-control" } })
                                </div>
                            </p>
                            <p>
                                <label class="control-label col-md-2">Hours</label>
                                <div class="col-md-10">
                                    @Html.Editor(allocation.Hours.ToString(), new { htmlAttributes = new { @id = "Hours", @class = "form-control" } })
                                </div>
                            </p>
                            <p>
                                <label class="control-label col-md-2">Paid</label>
                                <div class="col-md-10">
                                    @Html.Editor(allocation.Paid.ToString(), new { htmlAttributes = new { @id = "StartTime", @class = "form-control" } })
                                </div>
                            </p>
                            <p>
                                <label class="control-label col-md-2">PresenceConfirmation</label>
                                <div class="col-md-10">
                                    @Html.Editor(allocation.PresenceConfirmation.ToString(), new { htmlAttributes = new { @id = "StartTime", @class = "form-control" } })
                                </div>
                            </p>
                            <p>
                                <label class="control-label col-md-2">PresenceConfirmation</label>
                                <div class="col-md-10">
                                    @Html.TextBox(allocation.PaymentNote, new { htmlAttributes = new { @id = "StartTime", @class = "form-control" } })
                                </div>
                            </p>

                            <button type="button" value="Delete" class="btn btn-default" onclick="$(this).parent().remove();" />
                            <button type="button" value="Send Email" class="btn btn-default" />
                        </div>
                       }
                   }                        
            </div>            
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save"  onclick="completeForm();" class="btn btn-default" />
            </div>
        </div>
    </div>
}


<div>
    @Html.ActionLink("Back to List", "Index")
</div>
